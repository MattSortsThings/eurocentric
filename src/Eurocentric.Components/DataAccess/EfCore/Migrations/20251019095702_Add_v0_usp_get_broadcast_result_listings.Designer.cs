// <auto-generated />
using System;
using Eurocentric.Components.DataAccess.EfCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Eurocentric.Components.DataAccess.EfCore.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251019095702_Add_v0_usp_get_broadcast_result_listings")]
    partial class Add_v0_usp_get_broadcast_result_listings
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .HasAnnotation("ProductVersion", "10.0.0-rc.2.25502.107")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Eurocentric.Domain.V0.Aggregates.Broadcasts.Broadcast", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("broadcast_id");

                    b.Property<DateOnly>("BroadcastDate")
                        .HasColumnType("date")
                        .HasColumnName("broadcast_date");

                    b.Property<bool>("Completed")
                        .HasColumnType("bit")
                        .HasColumnName("completed");

                    b.Property<string>("ContestStage")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("contest_stage");

                    b.Property<Guid>("ParentContestId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("parent_contest_id");

                    b.HasKey("Id")
                        .HasName("pk_broadcast");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.HasAlternateKey("BroadcastDate")
                        .HasName("ak_broadcast_broadcast_date");

                    b.HasAlternateKey("ParentContestId", "ContestStage")
                        .HasName("ak_broadcast_parent_contest_id_contest_stage");

                    b.ToTable("broadcast", "v0", t =>
                        {
                            t.HasCheckConstraint("CK_broadcast_contest_stage_Enum", "[contest_stage] IN (N'SemiFinal1', N'SemiFinal2', N'GrandFinal')");

                            t.HasCheckConstraint("ck_broadcast_broadcast_date", "broadcast_date BETWEEN '2016-01-01' AND '2050-12-31'");
                        });
                });

            modelBuilder.Entity("Eurocentric.Domain.V0.Aggregates.Contests.Contest", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("contest_id");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("city_name");

                    b.Property<string>("ContestRules")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("contest_rules");

                    b.Property<int>("ContestYear")
                        .HasColumnType("int")
                        .HasColumnName("contest_year");

                    b.Property<bool>("Queryable")
                        .HasColumnType("bit")
                        .HasColumnName("queryable");

                    b.HasKey("Id")
                        .HasName("pk_contest");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.HasAlternateKey("ContestYear")
                        .HasName("ak_contest_contest_year");

                    b.ToTable("contest", "v0", t =>
                        {
                            t.HasCheckConstraint("CK_contest_contest_rules_Enum", "[contest_rules] IN (N'Liverpool', N'Stockholm')");

                            t.HasCheckConstraint("ck_contest_contest_year", "contest_year BETWEEN 2016 AND 2050");

                            t.HasCheckConstraint("ck_contest_global_televote_nullability", "(contest_rules = N'Liverpool' AND global_televote_voting_country_id IS NOT NULL) OR (contest_rules = N'Stockholm' AND global_televote_voting_country_id IS NULL)");
                        });

                    b.HasDiscriminator<string>("ContestRules");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Eurocentric.Domain.V0.Aggregates.Countries.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("country_id");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nchar(2)")
                        .HasColumnName("country_code")
                        .IsFixedLength();

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("country_name");

                    b.HasKey("Id")
                        .HasName("pk_country");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.HasAlternateKey("CountryCode")
                        .HasName("ak_country_country_code");

                    b.ToTable("country", "v0");
                });

            modelBuilder.Entity("Eurocentric.Domain.V0.Aggregates.Contests.LiverpoolRulesContest", b =>
                {
                    b.HasBaseType("Eurocentric.Domain.V0.Aggregates.Contests.Contest");

                    b.ToTable("contest", "v0", t =>
                        {
                            t.HasCheckConstraint("CK_contest_contest_rules_Enum", "[contest_rules] IN (N'Liverpool', N'Stockholm')");

                            t.HasCheckConstraint("ck_contest_contest_year", "contest_year BETWEEN 2016 AND 2050");

                            t.HasCheckConstraint("ck_contest_global_televote_nullability", "(contest_rules = N'Liverpool' AND global_televote_voting_country_id IS NOT NULL) OR (contest_rules = N'Stockholm' AND global_televote_voting_country_id IS NULL)");
                        });

                    b.HasDiscriminator().HasValue("Liverpool");
                });

            modelBuilder.Entity("Eurocentric.Domain.V0.Aggregates.Contests.StockholmRulesContest", b =>
                {
                    b.HasBaseType("Eurocentric.Domain.V0.Aggregates.Contests.Contest");

                    b.ToTable("contest", "v0", t =>
                        {
                            t.HasCheckConstraint("CK_contest_contest_rules_Enum", "[contest_rules] IN (N'Liverpool', N'Stockholm')");

                            t.HasCheckConstraint("ck_contest_contest_year", "contest_year BETWEEN 2016 AND 2050");

                            t.HasCheckConstraint("ck_contest_global_televote_nullability", "(contest_rules = N'Liverpool' AND global_televote_voting_country_id IS NOT NULL) OR (contest_rules = N'Stockholm' AND global_televote_voting_country_id IS NULL)");
                        });

                    b.HasDiscriminator().HasValue("Stockholm");
                });

            modelBuilder.Entity("Eurocentric.Domain.V0.Aggregates.Broadcasts.Broadcast", b =>
                {
                    b.OwnsMany("Eurocentric.Domain.V0.Aggregates.Broadcasts.Competitor", "Competitors", b1 =>
                        {
                            b1.Property<Guid>("BroadcastId")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("broadcast_id");

                            b1.Property<Guid>("CompetingCountryId")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("competing_country_id");

                            b1.Property<int>("FinishingPosition")
                                .HasColumnType("int")
                                .HasColumnName("finishing_position");

                            b1.Property<int>("RunningOrderSpot")
                                .HasColumnType("int")
                                .HasColumnName("running_order_spot");

                            b1.HasKey("BroadcastId", "CompetingCountryId")
                                .HasName("ak_broadcast_competitor_broadcast_id_competing_country_id");

                            SqlServerKeyBuilderExtensions.IsClustered(b1.HasKey("BroadcastId", "CompetingCountryId"));

                            b1.HasIndex("BroadcastId", "RunningOrderSpot")
                                .IsUnique()
                                .HasDatabaseName("ix_broadcast_competitor_broadcast_id_running_order_spot");

                            b1.ToTable("broadcast_competitor", "v0", t =>
                                {
                                    t.HasCheckConstraint("ck_broadcast_competitor_finishing_position", "finishing_position >= 1");

                                    t.HasCheckConstraint("ck_broadcast_competitor_running_order_spot", "running_order_spot >= 1");
                                });

                            b1.WithOwner()
                                .HasForeignKey("BroadcastId")
                                .HasConstraintName("fk_broadcast_competitor_broadcast_broadcast_id");

                            b1.OwnsMany("Eurocentric.Domain.V0.Aggregates.Broadcasts.JuryAward", "JuryAwards", b2 =>
                                {
                                    b2.Property<int>("RowId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasColumnName("row_id");

                                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b2.Property<int>("RowId"));

                                    b2.Property<Guid>("BroadcastId")
                                        .HasColumnType("uniqueidentifier")
                                        .HasColumnName("broadcast_id");

                                    b2.Property<Guid>("CompetingCountryId")
                                        .HasColumnType("uniqueidentifier")
                                        .HasColumnName("competing_country_id");

                                    b2.Property<int>("PointsValue")
                                        .HasColumnType("int")
                                        .HasColumnName("points_value");

                                    b2.Property<Guid>("VotingCountryId")
                                        .HasColumnType("uniqueidentifier")
                                        .HasColumnName("voting_country_id");

                                    b2.HasKey("RowId")
                                        .HasName("pk_broadcast_competitor_jury_award");

                                    SqlServerKeyBuilderExtensions.IsClustered(b2.HasKey("RowId"));

                                    b2.HasIndex("BroadcastId", "CompetingCountryId", "VotingCountryId")
                                        .IsUnique()
                                        .HasDatabaseName("ix_broadcast_competitor_jury_award_broadcast_id_competing_country_id_voting_country_id");

                                    b2.ToTable("broadcast_competitor_jury_award", "v0", t =>
                                        {
                                            t.HasCheckConstraint("CK_broadcast_competitor_jury_award_points_value_Enum", "[points_value] IN (0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12)");

                                            t.HasCheckConstraint("ck_broadcast_competitor_jury_award_country_ids", "competing_country_id <> voting_country_id");
                                        });

                                    b2.WithOwner()
                                        .HasForeignKey("BroadcastId", "CompetingCountryId")
                                        .HasConstraintName("fk_broadcast_competitor_jury_award_broadcast_competitor_broadcast_id_competing_country_id");
                                });

                            b1.OwnsMany("Eurocentric.Domain.V0.Aggregates.Broadcasts.TelevoteAward", "TelevoteAwards", b2 =>
                                {
                                    b2.Property<int>("RowId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int")
                                        .HasColumnName("row_id");

                                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b2.Property<int>("RowId"));

                                    b2.Property<Guid>("BroadcastId")
                                        .HasColumnType("uniqueidentifier")
                                        .HasColumnName("broadcast_id");

                                    b2.Property<Guid>("CompetingCountryId")
                                        .HasColumnType("uniqueidentifier")
                                        .HasColumnName("competing_country_id");

                                    b2.Property<int>("PointsValue")
                                        .HasColumnType("int")
                                        .HasColumnName("points_value");

                                    b2.Property<Guid>("VotingCountryId")
                                        .HasColumnType("uniqueidentifier")
                                        .HasColumnName("voting_country_id");

                                    b2.HasKey("RowId")
                                        .HasName("pk_broadcast_competitor_televote_award");

                                    SqlServerKeyBuilderExtensions.IsClustered(b2.HasKey("RowId"));

                                    b2.HasIndex("BroadcastId", "CompetingCountryId", "VotingCountryId")
                                        .IsUnique()
                                        .HasDatabaseName("ix_broadcast_competitor_televote_award_broadcast_id_competing_country_id_voting_country_id");

                                    b2.ToTable("broadcast_competitor_televote_award", "v0", t =>
                                        {
                                            t.HasCheckConstraint("CK_broadcast_competitor_televote_award_points_value_Enum", "[points_value] IN (0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12)");

                                            t.HasCheckConstraint("ck_broadcast_competitor_televote_award_country_ids", "competing_country_id <> voting_country_id");
                                        });

                                    b2.WithOwner()
                                        .HasForeignKey("BroadcastId", "CompetingCountryId")
                                        .HasConstraintName("fk_broadcast_competitor_televote_award_broadcast_competitor_broadcast_id_competing_country_id");
                                });

                            b1.Navigation("JuryAwards");

                            b1.Navigation("TelevoteAwards");
                        });

                    b.OwnsMany("Eurocentric.Domain.V0.Aggregates.Broadcasts.Jury", "Juries", b1 =>
                        {
                            b1.Property<Guid>("BroadcastId")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("broadcast_id");

                            b1.Property<Guid>("VotingCountryId")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("voting_country_id");

                            b1.Property<bool>("PointsAwarded")
                                .HasColumnType("bit")
                                .HasColumnName("points_awarded");

                            b1.HasKey("BroadcastId", "VotingCountryId")
                                .HasName("pk_broadcast_jury");

                            SqlServerKeyBuilderExtensions.IsClustered(b1.HasKey("BroadcastId", "VotingCountryId"));

                            b1.ToTable("broadcast_jury", "v0");

                            b1.WithOwner()
                                .HasForeignKey("BroadcastId")
                                .HasConstraintName("fk_broadcast_jury_broadcast_broadcast_id");
                        });

                    b.OwnsMany("Eurocentric.Domain.V0.Aggregates.Broadcasts.Televote", "Televotes", b1 =>
                        {
                            b1.Property<Guid>("BroadcastId")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("broadcast_id");

                            b1.Property<Guid>("VotingCountryId")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("voting_country_id");

                            b1.Property<bool>("PointsAwarded")
                                .HasColumnType("bit")
                                .HasColumnName("points_awarded");

                            b1.HasKey("BroadcastId", "VotingCountryId")
                                .HasName("pk_broadcast_televote");

                            SqlServerKeyBuilderExtensions.IsClustered(b1.HasKey("BroadcastId", "VotingCountryId"));

                            b1.ToTable("broadcast_televote", "v0");

                            b1.WithOwner()
                                .HasForeignKey("BroadcastId")
                                .HasConstraintName("fk_broadcast_televote_broadcast_broadcast_id");
                        });

                    b.Navigation("Competitors");

                    b.Navigation("Juries");

                    b.Navigation("Televotes");
                });

            modelBuilder.Entity("Eurocentric.Domain.V0.Aggregates.Contests.Contest", b =>
                {
                    b.OwnsMany("Eurocentric.Domain.V0.Aggregates.Contests.ChildBroadcast", "ChildBroadcasts", b1 =>
                        {
                            b1.Property<Guid>("ContestId")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("contest_id");

                            b1.Property<Guid>("ChildBroadcastId")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("child_broadcast_id");

                            b1.Property<bool>("Completed")
                                .HasColumnType("bit")
                                .HasColumnName("completed");

                            b1.Property<string>("ContestStage")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("nvarchar(10)")
                                .HasColumnName("contest_stage");

                            b1.HasKey("ContestId", "ChildBroadcastId")
                                .HasName("pk_contest_child_broadcast");

                            SqlServerKeyBuilderExtensions.IsClustered(b1.HasKey("ContestId", "ChildBroadcastId"));

                            b1.HasIndex("ContestId", "ContestStage")
                                .IsUnique()
                                .HasDatabaseName("ix_contest_child_broadcast_contest_id_contest_stage");

                            b1.ToTable("contest_child_broadcast", "v0", t =>
                                {
                                    t.HasCheckConstraint("CK_contest_child_broadcast_contest_stage_Enum", "[contest_stage] IN (N'SemiFinal1', N'SemiFinal2', N'GrandFinal')");
                                });

                            b1.WithOwner()
                                .HasForeignKey("ContestId")
                                .HasConstraintName("fk_contest_child_broadcast_contest_contest_id");
                        });

                    b.OwnsOne("Eurocentric.Domain.V0.Aggregates.Contests.GlobalTelevote", "GlobalTelevote", b1 =>
                        {
                            b1.Property<Guid>("ContestId")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("contest_id");

                            b1.Property<Guid>("VotingCountryId")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("global_televote_voting_country_id");

                            b1.HasKey("ContestId");

                            b1.ToTable("contest", "v0");

                            b1.WithOwner()
                                .HasForeignKey("ContestId")
                                .HasConstraintName("fk_contest_contest_contest_id");
                        });

                    b.OwnsMany("Eurocentric.Domain.V0.Aggregates.Contests.Participant", "Participants", b1 =>
                        {
                            b1.Property<Guid>("ContestId")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("contest_id");

                            b1.Property<Guid>("ParticipatingCountryId")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("participating_country_id");

                            b1.Property<string>("ActName")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)")
                                .HasColumnName("act_name");

                            b1.Property<string>("SemiFinalDraw")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("nvarchar(10)")
                                .HasColumnName("semi_final_draw");

                            b1.Property<string>("SongTitle")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)")
                                .HasColumnName("song_title");

                            b1.HasKey("ContestId", "ParticipatingCountryId")
                                .HasName("pk_contest_participant");

                            SqlServerKeyBuilderExtensions.IsClustered(b1.HasKey("ContestId", "ParticipatingCountryId"));

                            b1.ToTable("contest_participant", "v0", t =>
                                {
                                    t.HasCheckConstraint("CK_contest_participant_semi_final_draw_Enum", "[semi_final_draw] IN (N'SemiFinal1', N'SemiFinal2')");
                                });

                            b1.WithOwner()
                                .HasForeignKey("ContestId")
                                .HasConstraintName("fk_contest_participant_contest_contest_id");
                        });

                    b.Navigation("ChildBroadcasts");

                    b.Navigation("GlobalTelevote");

                    b.Navigation("Participants");
                });

            modelBuilder.Entity("Eurocentric.Domain.V0.Aggregates.Countries.Country", b =>
                {
                    b.OwnsMany("Eurocentric.Domain.V0.Aggregates.Countries.ContestRole", "ContestRoles", b1 =>
                        {
                            b1.Property<int>("RowId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasColumnName("row_id");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("RowId"));

                            b1.Property<Guid>("ContestId")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("contest_id");

                            b1.Property<string>("ContestRoleType")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)")
                                .HasColumnName("contest_role_type");

                            b1.Property<Guid>("CountryId")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("country_id");

                            b1.HasKey("RowId")
                                .HasName("pk_country_contest_role");

                            SqlServerKeyBuilderExtensions.IsClustered(b1.HasKey("RowId"));

                            b1.HasIndex("CountryId", "ContestId")
                                .IsUnique()
                                .HasDatabaseName("ix_country_contest_role_country_id_contest_id");

                            b1.ToTable("country_contest_role", "v0", t =>
                                {
                                    t.HasCheckConstraint("CK_country_contest_role_contest_role_type_Enum", "[contest_role_type] IN (N'Participant', N'GlobalTelevote')");
                                });

                            b1.WithOwner()
                                .HasForeignKey("CountryId")
                                .HasConstraintName("fk_country_contest_role_country_country_id");
                        });

                    b.Navigation("ContestRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
