using CSharpFunctionalExtensions;
using Eurocentric.Apis.Public.V0.Config;
using Eurocentric.Apis.Public.V0.Dtos.Rankings.CompetingCountries;
using Eurocentric.Apis.Public.V0.Enums;
using Eurocentric.Components.EndpointMapping;
using Eurocentric.Domain.Functional;
using Eurocentric.Domain.V0.Queries.Rankings.CompetingCountries;
using JetBrains.Annotations;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Http.HttpResults;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Routing;
using SlimMessageBus;
using IResult = Microsoft.AspNetCore.Http.IResult;

namespace Eurocentric.Apis.Public.V0.Features.Rankings.CompetingCountries;

internal static class GetCompetingCountryPointsAverageRankingsV0Point2
{
    private static Query ToQuery(this GetCompetingCountryPointsAverageRankingsRequest request)
    {
        return new Query
        {
            MinYear = request.MinYear,
            MaxYear = request.MaxYear,
            ContestStage = request.ContestStage?.ToDomainContestStageFilter(),
            VotingCountryCode = request.VotingCountryCode,
            VotingMethod = request.VotingMethod?.ToDomainVotingMethodFilter(),
            PageIndex = request.PageIndex,
            PageSize = request.PageSize,
            Descending = request.Descending,
        };
    }

    private static Ok<GetCompetingCountryPointsAverageRankingsResponse> MapToOk(PointsAverageRankings rankings)
    {
        (List<PointsAverageRanking> rankingRecords, PointsAverageMetadata metadataRecord) = rankings;

        return TypedResults.Ok(
            new GetCompetingCountryPointsAverageRankingsResponse(
                rankingRecords.Select(ranking => ranking.ToDto()).ToArray(),
                metadataRecord.ToDto()
            )
        );
    }

    private static async Task<IResult> ExecuteAsync(
        [AsParameters] GetCompetingCountryPointsAverageRankingsRequest request,
        [FromServices] IRequestResponseBus bus,
        CancellationToken ct = default
    )
    {
        Result<PointsAverageRankings, IDomainError> result = await bus.Send(request.ToQuery(), cancellationToken: ct);

        return result.IsSuccess
            ? MapToOk(result.GetValueOrDefault())
            : throw new InvalidOperationException("Query failed.");
    }

    internal sealed class EndpointMapper : IEndpointMapper
    {
        public void MapEndpoint(RouteGroupBuilder routeBuilder)
        {
            routeBuilder
                .MapGet("v0.2/rankings/competing-countries/points-average", ExecuteAsync)
                .WithName("PublicApi.V0.2.GetCompetingCountryPointsAverageRankings")
                .WithSummary("Get competing country points average rankings")
                .WithDescription(
                    """
                    Returns a page of competing country rankings based on descending points average.

                    Points average is a float between 0 and 12, calculated as the average individual points value
                    received by the competing country across broadcasts.

                    Rankings are generated by:
                    - Filtering voting data.
                    - Grouping data by competing country.
                    - Calculating total points, points award count, and points average.
                    - Ranking by descending points average.
                    - Sorting by rank (ascending or descending) and country code.
                    - Applying pagination.
                    """
                )
                .WithTags(EndpointConstants.Tags.CompetingCountryRankings)
                .Produces<GetCompetingCountryPointsAverageRankingsResponse>()
                .ProducesProblem(StatusCodes.Status400BadRequest)
                .ProducesProblem(StatusCodes.Status422UnprocessableEntity);
        }
    }

    internal sealed record Query : PointsAverageQuery, IQuery<PointsAverageRankings>;

    [UsedImplicitly]
    internal sealed class QueryHandler(ICompetingCountryRankingsGateway gateway)
        : IQueryHandler<Query, PointsAverageRankings>
    {
        public async Task<Result<PointsAverageRankings, IDomainError>> OnHandle(Query query, CancellationToken ct) =>
            await gateway.GetPointsAverageRankingsAsync(query, ct);
    }
}
